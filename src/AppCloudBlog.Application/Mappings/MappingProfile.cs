namespace AppCloudBlog.Application.Mappings;

public class MappingProfile : IRegister
{
    public void Register(TypeAdapterConfig config)
    {
        // --- User & Authentication Mappings ---

        // ApplicationUser (Domain) to UserDto (DTO)
        config.NewConfig<ApplicationUser, UserDto>()
           .Map(dest => dest.Id, src => src.Id)
           .Map(dest => dest.FirstName, src => src.FirstName)
           .Map(dest => dest.LastName, src => src.LastName)
           .Map(dest => dest.Email, src => src.Email)
           .Map(dest => dest.Bio, src => src.Bio)
           .Map(dest => dest.ProfilePictureUrl, src => src.ProfilePictureUrl)
           .Map(dest => dest.RegistrationDate, src => src.RegistrationDate)
           .Map(dest => dest.IsActive, src => src.IsActive)
           .Ignore(dest => dest.Roles); // Roles will be populated manually in handlers (e.g., via UserManager)

        // ApplicationUser (Domain) to UserFollowDto (DTO)
        config.NewConfig<ApplicationUser, UserFollowDto>()
           .Map(dest => dest.Id, src => src.Id)
           .Map(dest => dest.FirstName, src => src.FirstName)
           .Map(dest => dest.LastName, src => src.LastName)
           .Map(dest => dest.ProfilePictureUrl, src => src.ProfilePictureUrl);

        // UserRegistrationDto (DTO) to ApplicationUser (Domain)
        config.NewConfig<UserRegistrationDto, ApplicationUser>()
           .Map(dest => dest.Email, src => src.Email)
           .Map(dest => dest.UserName, src => src.Email) // UserName is typically the email for Identity
           .Map(dest => dest.FirstName, src => src.FirstName)
           .Map(dest => dest.LastName, src => src.LastName)
           .Ignore(dest => dest.Id) // Id will be generated by Identity
           .Ignore(dest => dest.PasswordHash ?? string.Empty); // Ensure PasswordHash is not null

        // UserProfileUpdateDto (DTO) to ApplicationUser (Domain)
        config.NewConfig<UserProfileUpdateDto, ApplicationUser>()
           .Map(dest => dest.FirstName, src => src.FirstName)
           .Map(dest => dest.LastName, src => src.LastName)
           .Map(dest => dest.Bio, src => src.Bio)
           .Map(dest => dest.ProfilePictureUrl, src => src.ProfilePictureUrl)
           .Ignore(dest => dest.Id) // Don't map ID from DTO to existing entity
           .Ignore(dest => dest.Email ?? string.Empty) // Ensure Email is not null
           .Ignore(dest => dest.UserName ?? string.Empty); // Ensure UserName is not null


        // --- Post Mappings ---

        // Post (Domain) to PostDto (DTO)
        config.NewConfig<Post, PostDto>()
           .Map(dest => dest.Id, src => src.Id)
           .Map(dest => dest.Title, src => src.Title)
           .Map(dest => dest.Content, src => src.Content)
           .Map(dest => dest.Excerpt, src => src.Excerpt)
           .Map(dest => dest.Slug, src => src.Slug)
           .Map(dest => dest.PublishDate, src => src.PublishDate)
           .Map(dest => dest.IsPublished, src => src.IsPublished)
           .Map(dest => dest.ViewCount, src => src.ViewCount)
           .Map(dest => dest.FeaturedImageUrl, src => src.FeaturedImageUrl)
           .Map(dest => dest.Author, src => src.Author.Adapt<UserDto>()) // Nested mapping for Author [6]
           .Map(dest => dest.Categories, src => src.PostCategories.Select(pc => pc.Category).Adapt<ICollection<CategoryDto>>()) // Collection mapping [2]
           .Map(dest => dest.Tags, src => src.PostTags.Select(pt => pt.Tag).Adapt<ICollection<TagDto>>()) // Collection mapping
           .Map(dest => dest.Comments, src => src.Comments.Adapt<ICollection<CommentDto>>()) // Collection mapping
           .Ignore(dest => dest.LikeCount) // Aggregated count, will be populated in handler
           .Ignore(dest => dest.IsLikedByUser) // Runtime check, populated in handler
           .Ignore(dest => dest.IsSavedByUser); // Runtime check, populated in handler

        // Post (Domain) to PostListDto (DTO)
        config.NewConfig<Post, PostListDto>()
           .Map(dest => dest.Id, src => src.Id)
           .Map(dest => dest.Title, src => src.Title)
           .Map(dest => dest.Excerpt, src => src.Excerpt)
           .Map(dest => dest.Slug, src => src.Slug)
           .Map(dest => dest.PublishDate, src => src.PublishDate)
           .Map(dest => dest.IsPublished, src => src.IsPublished)
           .Map(dest => dest.ViewCount, src => src.ViewCount)
           .Map(dest => dest.FeaturedImageUrl, src => src.FeaturedImageUrl)
           .Map(dest => dest.Author, src => src.Author.Adapt<UserDto>()) // Nested mapping for Author
           .Map(dest => dest.Categories, src => src.PostCategories.Select(pc => pc.Category).Adapt<ICollection<CategoryDto>>())
           .Map(dest => dest.Tags, src => src.PostTags.Select(pt => pt.Tag).Adapt<ICollection<TagDto>>())
           .Ignore(dest => dest.CommentCount) // Aggregated count, will be populated in handler
           .Ignore(dest => dest.LikeCount); // Aggregated count, will be populated in handler

        // CreatePostDto (DTO) to Post (Domain)
        config.NewConfig<CreatePostDto, Post>()
           .Map(dest => dest.Title, src => src.Title)
           .Map(dest => dest.Content, src => src.Content)
           .Map(dest => dest.Excerpt, src => src.Excerpt)
           .Map(dest => dest.Slug, src => src.Slug)
           .Map(dest => dest.FeaturedImageUrl, src => src.FeaturedImageUrl)
           .Map(dest => dest.IsPublished, src => src.IsPublished)
           .Ignore(dest => dest.Id) // ID will be generated by DB
           .Ignore(dest => dest.AuthorId) // AuthorId will be set in handler
           .Ignore(dest => dest.Author)
           .Ignore(dest => dest.PublishDate) // PublishDate will be set in handler
           .Ignore(dest => dest.ViewCount)
           .Ignore(dest => dest.PostCategories) // Relationships handled separately
           .Ignore(dest => dest.PostTags)
           .Ignore(dest => dest.Comments)
           .Ignore(dest => dest.Likes)
           .Ignore(dest => dest.SavedPosts);

        // UpdatePostDto (DTO) to Post (Domain)
        config.NewConfig<UpdatePostDto, Post>()
           .Map(dest => dest.Id, src => src.Id)
           .Map(dest => dest.Title, src => src.Title)
           .Map(dest => dest.Content, src => src.Content)
           .Map(dest => dest.Excerpt, src => src.Excerpt)
           .Map(dest => dest.Slug, src => src.Slug)
           .Map(dest => dest.FeaturedImageUrl, src => src.FeaturedImageUrl)
           .Map(dest => dest.IsPublished, src => src.IsPublished)
           .Ignore(dest => dest.AuthorId) // AuthorId is not updated via this DTO
           .Ignore(dest => dest.Author)
           .Ignore(dest => dest.PublishDate)
           .Ignore(dest => dest.ViewCount)
           .Ignore(dest => dest.PostCategories) // Relationships handled separately
           .Ignore(dest => dest.PostTags)
           .Ignore(dest => dest.Comments)
           .Ignore(dest => dest.Likes)
           .Ignore(dest => dest.SavedPosts);


        // --- Category Mappings ---

        // Category (Domain) to CategoryDto (DTO)
        config.NewConfig<Category, CategoryDto>()
           .Map(dest => dest.Id, src => src.Id)
           .Map(dest => dest.Name, src => src.Name)
           .Map(dest => dest.Slug, src => src.Slug)
           .Map(dest => dest.Description, src => src.Description)
           .Ignore(dest => dest.PostCount); // Aggregated count, populated in handler

        // CreateCategoryDto (DTO) to Category (Domain)
        config.NewConfig<CreateCategoryDto, Category>()
           .Map(dest => dest.Name, src => src.Name)
           .Map(dest => dest.Slug, src => src.Slug)
           .Map(dest => dest.Description, src => src.Description)
           .Ignore(dest => dest.Id); // ID generated by DB

        // UpdateCategoryDto (DTO) to Category (Domain)
        config.NewConfig<UpdateCategoryDto, Category>()
           .Map(dest => dest.Id, src => src.Id)
           .Map(dest => dest.Name, src => src.Name)
           .Map(dest => dest.Slug, src => src.Slug)
           .Map(dest => dest.Description, src => src.Description);


        // --- Tag Mappings ---

        // Tag (Domain) to TagDto (DTO)
        config.NewConfig<Tag, TagDto>()
           .Map(dest => dest.Id, src => src.Id)
           .Map(dest => dest.Name, src => src.Name)
           .Map(dest => dest.Slug, src => src.Slug)
           .Ignore(dest => dest.PostCount); // Aggregated count, populated in handler

        // CreateTagDto (DTO) to Tag (Domain)
        config.NewConfig<CreateTagDto, Tag>()
           .Map(dest => dest.Name, src => src.Name)
           .Map(dest => dest.Slug, src => src.Slug)
           .Ignore(dest => dest.Id); // ID generated by DB

        // UpdateTagDto (DTO) to Tag (Domain)
        config.NewConfig<UpdateTagDto, Tag>()
           .Map(dest => dest.Id, src => src.Id)
           .Map(dest => dest.Name, src => src.Name)
           .Map(dest => dest.Slug, src => src.Slug);


        // --- Comment Mappings ---

        // Comment (Domain) to CommentDto (DTO)
        config.NewConfig<Comment, CommentDto>()
           .Map(dest => dest.Id, src => src.Id)
           .Map(dest => dest.Content, src => src.Content)
           .Map(dest => dest.CommentDate, src => src.CommentDate)
           .Map(dest => dest.IsApproved, src => src.IsApproved)
           .Map(dest => dest.Commenter, src => src.Commenter.Adapt<UserDto>()) // Nested mapping for Commenter
           .Map(dest => dest.PostId, src => src.PostId)
           .Map(dest => dest.ParentCommentId, src => src.ParentCommentId)
           .Map(dest => dest.Replies, src => src.Replies.Adapt<ICollection<CommentDto>>()); // Recursive nested mapping

        // CreateCommentDto (DTO) to Comment (Domain)
        config.NewConfig<CreateCommentDto, Comment>()
           .Map(dest => dest.PostId, src => src.PostId)
           .Map(dest => dest.ParentCommentId, src => src.ParentCommentId)
           .Map(dest => dest.Content, src => src.Content)
           .Ignore(dest => dest.Id) // ID generated by DB
           .Ignore(dest => dest.CommenterId) // CommenterId set in handler
           .Ignore(dest => dest.Commenter)
           .Ignore(dest => dest.CommentDate) // Set in handler/DBContext
           .Ignore(dest => dest.IsApproved) // Set in handler/DBContext
           .Ignore(dest => dest.Replies)
           .Ignore(dest => dest.ParentCommentId ?? Guid.Empty);

        // UpdateCommentDto (DTO) to Comment (Domain)
        config.NewConfig<UpdateCommentDto, Comment>()
           .Map(dest => dest.Id, src => src.Id)
           .Map(dest => dest.Content, src => src.Content)
           .Map(dest => dest.IsApproved, src => src.IsApproved)
           .Ignore(dest => dest.CommenterId)
           .Ignore(dest => dest.Commenter)
           .Ignore(dest => dest.PostId)
           .Ignore(dest => dest.ParentCommentId ?? Guid.Empty)
           .Ignore(dest => dest.CommentDate)
           .Ignore(dest => dest.Replies);


        // --- Notification Mappings ---

        // Notification (Domain) to NotificationDto (DTO)
        config.NewConfig<Notification, NotificationDto>()
           .Map(dest => dest.Id, src => src.Id)
           .Map(dest => dest.Message, src => src.Message)
           .Map(dest => dest.Type, src => src.Type)
           .Map(dest => dest.IsRead, src => src.IsRead)
           .Map(dest => dest.SentDate, src => src.SentDate)
           .Map(dest => dest.RelatedEntityId, src => src.RelatedEntityId);

        // --- Dashboard DTOs ---
        // UserDashboardDto and AdminDashboardDto are composite DTOs
        // that will be constructed manually in their respective query handlers
        // by fetching data from multiple sources and mapping individual components.
        // Direct Mapster configuration from a single domain entity is not applicable here.
    }
}